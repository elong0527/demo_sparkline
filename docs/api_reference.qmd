---
title: "API Reference"
---

## Core Classes

### ForestPlot

The main class for creating forest plots from clinical trial data.

```python
ForestPlot(
    data: pl.DataFrame,
    panels: list[Panel],
    config: Config | None = None
)
```

**Parameters:**

- `data`: Polars DataFrame containing the data to display
- `panels`: List of Panel objects defining the layout
- `config`: Optional configuration object

**Methods:**

- `to_reactable()`: Generate interactive Reactable table
- `to_dataframe()`: Export processed DataFrame
- `to_rtf(filename)`: Export to RTF format
- `to_plotnine()`: Generate static plot

### Config

Configuration for forest plot display and documentation.

```python
Config(
    figure_width: float | None = None,
    figure_height: float | None = None,
    sparkline_height: int = 30,
    colors: list[str] | None = None,
    reference_line_color: str = "#00000050",
    formatters: dict[str, Callable] | None = None,
    title: str | None = None,
    footnote: str | None = None,
    source: str | None = None
)
```

## Panel Classes

### TextPanel

Display one or more text/numeric columns.

```python
TextPanel(
    variables: str | list[str],
    group_by: str | list[str] | None = None,
    title: str | None = None,
    labels: str | list[str] | None = None,
    width: int | list[int] | None = None,
    footer: str = ""
)
```

**Parameters:**

- `variables`: Column name(s) to display
- `group_by`: Column(s) for hierarchical grouping
- `title`: Panel title
- `labels`: Custom labels for columns
- `width`: Column width(s) in pixels
- `footer`: Footer text

### SparklinePanel

Display point estimates with error bars.

```python
SparklinePanel(
    variables: str | list[str],
    lower: str | list[str] | None = None,
    upper: str | list[str] | None = None,
    title: str | None = None,
    labels: str | list[str] | None = None,
    width: int | None = None,
    footer: str = "",
    reference_line: float | str | None = None,
    reference_line_color: str | None = None,
    xlim: tuple[float, float] | None = None
)
```

**Parameters:**

- `variables`: Column name(s) for point estimates
- `lower`: Column name(s) for lower bounds
- `upper`: Column name(s) for upper bounds
- `reference_line`: Value or column name for reference line
- `xlim`: X-axis limits as (min, max)

## Data Validators

### validate_confidence_intervals

Validate that confidence intervals contain point estimates.

```python
validate_confidence_intervals(
    data: pl.DataFrame,
    estimate_col: str,
    lower_col: str,
    upper_col: str
) -> None
```

### validate_grouping_structure

Validate hierarchical grouping structure.

```python
validate_grouping_structure(
    data: pl.DataFrame,
    group_cols: list[str]
) -> None
```

### validate_numeric_columns

Validate that specified columns contain numeric data.

```python
validate_numeric_columns(
    data: pl.DataFrame,
    columns: list[str]
) -> None
```

## Complete Example

```python
import polars as pl
from forestly import ForestPlot, TextPanel, SparklinePanel, Config

# Prepare data
data = pl.DataFrame({
    "subgroup": ["Overall", "Age <65", "Age >=65"],
    "category": ["Overall", "Age", "Age"],
    "hazard_ratio": [0.72, 0.68, 0.81],
    "hr_ci_lower": [0.58, 0.51, 0.62],
    "hr_ci_upper": [0.89, 0.91, 1.05],
    "p_value": [0.003, 0.012, 0.089],
})

# Create forest plot
forest = ForestPlot(
    data=data,
    panels=[
        TextPanel(
            variables="subgroup",
            group_by="category",
            title="Subgroup"
        ),
        SparklinePanel(
            variables="hazard_ratio",
            lower="hr_ci_lower",
            upper="hr_ci_upper",
            title="Hazard Ratio (95% CI)",
            reference_line=1.0,
            xlim=(0.4, 1.2)
        ),
        TextPanel(
            variables="p_value",
            title="P-value"
        )
    ],
    config=Config(
        title="Subgroup Analysis",
        colors=["#FF6B35"],
        sparkline_height=35
    )
)

# Generate outputs
reactable = forest.to_reactable()
```